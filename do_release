#!/bin/bash

# Create a new edi release that can be uploaded to a repository.
#
# usage: do_release 0.2.0

set -e
set -o errexit
set -o pipefail

if [ -z ${1} ]
then
    >&2 echo "Error: Usage: ${0} VERSION"
    exit 1
fi

set -o nounset

SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd ${SCRIPTDIR}

if ! git diff --exit-code --quiet
then
    >&2 echo "Error: there are unstaged changes!"
    exit 1
fi

if ! git diff --cached --exit-code --quiet
then
    >&2 echo "Error: there are uncommitted changes!"
    exit 1
fi

git clean -dxf

source /etc/os-release

if [ "${VERSION_ID}" == "16.04" ]
then
    NEW_VERSION=${1}
    GIT_BRANCH="master"
else
    NEW_VERSION="${1}+u${VERSION_ID}"
    GIT_BRANCH="${NEW_VERSION}"
    git checkout -b ${GIT_BRANCH}
fi


SETUP_PY="setup.py"
sed -i "s/^    version=.*/    version='${NEW_VERSION}',/g" ${SETUP_PY}
git add ${SETUP_PY}

SPHINX_CONFIG="docs/conf.py"
sed -i "s/^version =.*/version = '${NEW_VERSION}'/g" ${SPHINX_CONFIG}
sed -i "s/^release =.*/release = '${NEW_VERSION}'/g" ${SPHINX_CONFIG}
git add ${SPHINX_CONFIG}

VERSION_HELPERS="edi/lib/versionhelpers.py"
sed -i "s/^edi_fallback_version =.*/edi_fallback_version = '${NEW_VERSION}'/g" ${VERSION_HELPERS}
git add ${VERSION_HELPERS}

gbp dch --new-version ${NEW_VERSION} --release --distribution ${VERSION_CODENAME} --debian-branch ${GIT_BRANCH} --debian-tag v%\(version\)s
git add debian/changelog
git commit -m "New version ${NEW_VERSION}."
git tag -a v${NEW_VERSION} -m "New version ${NEW_VERSION}."

# verify that the package can be built:
debuild -us -uc

debuild -S
dput ppa:m-luescher/edi-snapshots ../edi_${NEW_VERSION}_source.changes

git push origin ${GIT_BRANCH}
git push --tags
